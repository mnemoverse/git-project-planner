#!/usr/bin/env bash
set -euo pipefail

# Generate benchmark report from results
# Compares latest results with baseline and historical data

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
RESULTS_DIR="$SCRIPT_DIR/results"
REPORT_FILE="$RESULTS_DIR/report_$(date +%Y%m%d_%H%M%S).md"

# Colors
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}Generating benchmark report...${NC}"

# Check if jq is available for JSON parsing
if ! command -v jq &> /dev/null; then
    echo "⚠️  jq not found, installing basic report generation"
    HAS_JQ=false
else
    HAS_JQ=true
fi

# Start report
cat > "$REPORT_FILE" << 'EOF'
# Benchmark Report

**Generated:** $(date)

## Overview

This report summarizes the performance benchmarks for Git Project Planner.

EOF

# Add system info
cat >> "$REPORT_FILE" << EOF

## System Information

- **OS:** $(uname -s) $(uname -r)
- **Python:** $(python3 --version 2>&1)
- **CPU:** $(nproc 2>/dev/null || echo "N/A") cores
- **Date:** $(date)

## Benchmark Results

EOF

# Function to add benchmark section
add_benchmark_section() {
    local benchmark_name=$1
    local display_name=$2
    
    latest_file="$RESULTS_DIR/${benchmark_name}_latest.json"
    baseline_file="$RESULTS_DIR/${benchmark_name}_baseline.json"
    
    if [ ! -f "$latest_file" ]; then
        echo "⚠️  No results found for $display_name"
        return
    fi
    
    cat >> "$REPORT_FILE" << EOF

### $display_name

EOF
    
    if [ "$HAS_JQ" = true ]; then
        # Extract data using jq
        total_time=$(jq -r '.summary.total_time // "N/A"' "$latest_file")
        avg_time=$(jq -r '.summary.avg_time // "N/A"' "$latest_file")
        ops_count=$(jq -r '.summary.operations_count // "N/A"' "$latest_file")
        
        cat >> "$REPORT_FILE" << EOF
**Summary:**
- Total Time: ${total_time}s
- Average Time: ${avg_time}s
- Operations: ${ops_count}

**Operations:**

| Operation | Time (s) | Memory (MB) |
|-----------|----------|-------------|
EOF
        
        # List operations
        jq -r '.operations | to_entries[] | "| \(.key) | \(.value.elapsed_time) | \(.value.memory_mb) |"' "$latest_file" >> "$REPORT_FILE"
        
        # Compare with baseline if available
        if [ -f "$baseline_file" ]; then
            cat >> "$REPORT_FILE" << EOF

**Comparison with Baseline:**

EOF
            baseline_time=$(jq -r '.summary.total_time // 0' "$baseline_file")
            current_time=$(jq -r '.summary.total_time // 0' "$latest_file")
            
            if [ "$baseline_time" != "0" ] && [ "$baseline_time" != "null" ]; then
                diff=$(echo "scale=2; (($current_time - $baseline_time) / $baseline_time) * 100" | bc 2>/dev/null || echo "N/A")
                
                if [ "$diff" != "N/A" ]; then
                    cat >> "$REPORT_FILE" << EOF
- Baseline time: ${baseline_time}s
- Current time: ${current_time}s
- Difference: ${diff}%

EOF
                fi
            fi
        fi
    else
        echo "- Results available in \`$latest_file\`" >> "$REPORT_FILE"
    fi
    
    echo "" >> "$REPORT_FILE"
}

# Add sections for each benchmark
add_benchmark_section "file_operations" "File Operations"
add_benchmark_section "validation" "Validation Scripts"
add_benchmark_section "sync_tasks" "Sync Tasks"

# Add historical trends section
cat >> "$REPORT_FILE" << 'EOF'

## Historical Trends

EOF

history_count=$(find "$RESULTS_DIR/history" -name "*.json" 2>/dev/null | wc -l || echo 0)
cat >> "$REPORT_FILE" << EOF
Total benchmark runs recorded: $history_count

EOF

# Recommendations
cat >> "$REPORT_FILE" << 'EOF'

## Recommendations

### Performance Targets

| Metric | Target | Status |
|--------|--------|--------|
| Task file parsing | < 0.1s per file | Check results above |
| Validation scripts | < 5s total | Check results above |
| Sync operations | < 1s per task | Check results above |

### Next Steps

1. Review any operations exceeding target times
2. Consider optimization for slow operations
3. Monitor trends over multiple runs
4. Set baseline with `./run-benchmarks.sh --set-baseline`

---

*Report generated by Git Project Planner benchmark suite*
EOF

echo -e "${GREEN}✅ Report generated: $REPORT_FILE${NC}"
echo ""
echo "📄 View report:"
echo "   cat $REPORT_FILE"
echo ""

# Also output to console
if [ "${1:-}" = "--show" ]; then
    cat "$REPORT_FILE"
fi
